from aiogram import types
from aiogram.dispatcher import Dispatcher
from aiogram.types import ParseMode, InlineKeyboardMarkup, InlineKeyboardButton
import random
import sqlite3
import logging
from data import cats, rarity_weights
import time
import json


with open('config.json', 'r', encoding='utf-8') as config_file:
    config = json.load(config_file)


def get_random_cat(cats):
    weighted_cats = []
    for cat in cats:
        weight = rarity_weights.get(cat["rarity"], 1)
        weighted_cats.extend([cat] * weight)
    return random.choice(weighted_cats)


try:
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
except sqlite3.Error as e:
    logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    raise


CARD_PRICE = config['prices']['card']
COFFEE_PRICE = config['prices']['coffee']
SCRATCHER_PRICE = config['prices']['scratcher']
COMPANION_PRICE = config['prices']['companion']
BOOSTER_PRICE = config['prices']['booster']
TIME_WATCH_PRICE = config['prices']['time_watch']
MAGIC_MEDALLION_PRICE = config['prices']['magic_medallion']
MAGIC_LUCK_SCROLL_PRICE = config['prices']['magic_luck_scroll']
MAGIC_SCROLL_PRICE = config['prices']['magic_scroll']


async def shop_command(message: types.Message):
    if message.chat.type != "private":
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö (–õ–°).")
        return

    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üé¥ –ö—É–ø–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –∫–æ—Ç–∞", callback_data="buy_card"),
        InlineKeyboardButton("‚òï –ö—É–ø–∏—Ç—å –∫–æ—Ñ–µ", callback_data="buy_coffee"),
        InlineKeyboardButton("üêæ –ö—É–ø–∏—Ç—å –ß–µ—Å–∞–ª–∫—É", callback_data="buy_scratcher"),
        InlineKeyboardButton("üê± –ö–æ—Ç –∫–æ–º–ø–∞–Ω—å–æ–Ω", callback_data="buy_companion"),
        InlineKeyboardButton("üöÄ –ö–æ—Ç-–±—É—Å—Ç–µ—Ä", callback_data="buy_booster"),
        InlineKeyboardButton("‚è≥ –ß–∞—Å—ã –≤—Ä–µ–º–µ–Ω–∏", callback_data="buy_time_watch"),
        InlineKeyboardButton("üîÆ –ú–∞–≥–∏—á–µ—Å–∫–∏–π –º–µ–¥–∞–ª—å–æ–Ω", callback_data="buy_magic_medallion"),
        InlineKeyboardButton("‚ú® –ú–∞–≥–∏—á–µ—Å–∫–∏–π —Å–≤–∏—Ç–æ–∫ —É–¥–∞—á–∏", callback_data="buy_magic_luck_scroll"),
        InlineKeyboardButton("üß™ –ú–∞–≥–∏—á–µ—Å–∫–∏–π —Å–≤–∏—Ç–æ–∫", callback_data="buy_magic_scroll")
    )


    await message.answer(
            "‚ú® **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —É—é—Ç–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω!** üõí‚ú®\n"
            f"üé¥ **–°–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –∫–æ—Ç–∞** ‚Äî `{config['prices']['card']}` –∫–æ—Ç–æ–∫–æ–∏–Ω–æ–≤\n"
            f"‚òï **–ß–∞—à–∫–∞ –∫–æ—Ñ–µ** ‚Äî `{config['prices']['coffee']}` –∫–æ—Ç–æ–∫–æ–∏–Ω–æ–≤\n"
            f"üêæ **–ß–µ—Å–∞–ª–∫–∞** ‚Äî `{config['prices']['scratcher']}` –∫–æ—Ç–æ–∫–æ–∏–Ω–æ–≤\n"
            f"üê± **–ö–æ—Ç-–∫–æ–º–ø–∞–Ω—å–æ–Ω** ‚Äî `{config['prices']['companion']}` –∫–æ—Ç–æ–∫–æ–∏–Ω–æ–≤\n"
            f"üöÄ **–ö–æ—Ç-–±—É—Å—Ç–µ—Ä** ‚Äî `{config['prices']['booster']}` –∫–æ—Ç–æ–∫–æ–∏–Ω–æ–≤\n"
            f"‚è≥ **–ß–∞—Å—ã –≤—Ä–µ–º–µ–Ω–∏** ‚Äî `{config['prices']['time_watch']}` –∫–æ—Ç–æ–∫–æ–∏–Ω–æ–≤\n"
            f"üîÆ **–ú–∞–≥–∏—á–µ—Å–∫–∏–π –º–µ–¥–∞–ª—å–æ–Ω** ‚Äî `{config['prices']['magic_medallion']}` –º–∞–≥–∏—á–µ—Å–∫–∏—Ö –∫–æ–∏–Ω–æ–≤\n"
            f"‚ú® **–ú–∞–≥–∏—á–µ—Å–∫–∏–π —Å–≤–∏—Ç–æ–∫ —É–¥–∞—á–∏** ‚Äî `{config['prices']['magic_luck_scroll']}` –º–∞–≥–∏—á–µ—Å–∫–∏—Ö –∫–æ–∏–Ω–æ–≤\n"
            f"üß™ **–ú–∞–≥–∏—á–µ—Å–∫–∏–π —Å–≤–∏—Ç–æ–∫** ‚Äî `{config['prices']['magic_scroll']}` –º–∞–≥–∏—á–µ—Å–∫–∏—Ö –∫–æ–∏–Ω–æ–≤\n",
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN,
     )

async def buy_card_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    cursor.execute("SELECT cat_coins FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    if not result:
        await callback.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ª—É—á–∏—Ç–µ –∫–æ—Ç–∞, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ!")
        return

    cat_coins = result[0]

    if cat_coins < CARD_PRICE:
        await callback.answer(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ—Ç–æ–∫–æ–∏–Ω–æ–≤. –ù—É–∂–Ω–æ {CARD_PRICE}, –∞ —É –≤–∞—Å {cat_coins}.")
        return

    cursor.execute("UPDATE users SET cat_coins = cat_coins - ? WHERE user_id = ?", (CARD_PRICE, user_id))
    conn.commit()

    cat = get_random_cat(cats)

    rarities_str = ", ".join([
        "–æ–±—ã—á–Ω—ã–π",
        "—Ä–µ–¥–∫–∏–π",
        "—Å–≤–µ—Ä—Ö—Ä–µ–¥–∫–∏–π",
        "—ç–ø–∏—á–µ—Å–∫–∏–π",
        "–º–∏—Ñ–∏—á–µ—Å–∫–∏–π",
        "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π",
        "—Ö—Ä–æ–º–æ—Ç–∏—á–µ—Å–∫–∏–π",
        "–æ—Å–æ–±—ã–π"
    ])

    try:
        cursor.execute(
            f"""
            UPDATE users SET 
                rarity = ?, 
                points = points + ?, 
                highest_rarity = CASE 
                    WHEN INSTR('{rarities_str}', ?) > INSTR('{rarities_str}', highest_rarity) THEN ? 
                    ELSE highest_rarity 
                END
            WHERE user_id = ?
            """,
            (
                cat["rarity"],
                cat["points"],
                cat["rarity"],
                cat["rarity"],
                user_id,
            ),
        )
        conn.commit()
        message_text = (
            f"üé¥ –í—ã –∫—É–ø–∏–ª–∏ –∫–∞—Ä—Ç–æ—á–∫—É ¬´{cat['catname']}¬ª –∑–∞ {CARD_PRICE} –∫–æ—Ç–æ–∫–æ–∏–Ω–æ–≤!\n\n"
            f"üíé –†–µ–¥–∫–æ—Å—Ç—å: {cat['rarity']}\n"
            f"‚ú® –û—á–∫–∏: +{cat['points']}\n"
            f"üê± –û—Å—Ç–∞—Ç–æ–∫ –∫–æ—Ç–æ–∫–æ–∏–Ω–æ–≤: {cat_coins - CARD_PRICE}"
        )
        await callback.message.answer_photo(
            photo=cat["photo"],
            caption=message_text,
            parse_mode=ParseMode.MARKDOWN,
        )
    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


async def buy_coffee_callback(callback: types.CallbackQuery, cooldowns: dict):
    user_id = callback.from_user.id
    cursor.execute("SELECT cat_coins, last_cat_time FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    if not result:
        await callback.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ª—É—á–∏—Ç–µ –∫–æ—Ç–∞, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ!")
        return

    cat_coins, last_cat_time = result

    if cat_coins < COFFEE_PRICE:
        await callback.answer(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ—Ç–æ–∫–æ–∏–Ω–æ–≤. –ù—É–∂–Ω–æ {COFFEE_PRICE}, –∞ —É –≤–∞—Å {cat_coins}.")
        return

    cursor.execute("UPDATE users SET cat_coins = cat_coins - ? WHERE user_id = ?", (COFFEE_PRICE, user_id))
    conn.commit()

    if user_id in cooldowns:
        cooldowns[user_id] -= 3600
    else:
        cooldowns[user_id] = last_cat_time - 3600

    cursor.execute("UPDATE users SET last_cat_time = ? WHERE user_id = ?", (cooldowns[user_id], user_id))
    conn.commit()

    await callback.message.answer(
        f"‚òï –í—ã –∫—É–ø–∏–ª–∏ —á–∞—à–∫—É –∫–æ—Ñ–µ –∑–∞ {COFFEE_PRICE} –∫–æ—Ç–æ–∫–æ–∏–Ω–æ–≤!\n"
        f"–¢–µ–ø–µ—Ä—å –∫—É–ª–¥–∞—É–Ω –¥–ª—è –∫–æ–º–∞–Ω–¥—ã '–∫–æ—Ç' —Å–æ–∫—Ä–∞—â—ë–Ω –Ω–∞ 1 —á–∞—Å.\n"
        f"üê± –û—Å—Ç–∞—Ç–æ–∫ –∫–æ—Ç–æ–∫–æ–∏–Ω–æ–≤: {cat_coins - COFFEE_PRICE}"
    )


async def buy_scratcher_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    cursor.execute("SELECT cat_coins, has_scratcher FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    if not result:
        await callback.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ª—É—á–∏—Ç–µ –∫–æ—Ç–∞, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ!")
        return

    cat_coins, has_scratcher = result

    if has_scratcher:
        await callback.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ß–µ—Å–∞–ª–∫–∞!")
        return

    if cat_coins < SCRATCHER_PRICE:
        await callback.answer(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ—Ç–æ–∫–æ–∏–Ω–æ–≤. –ù—É–∂–Ω–æ {SCRATCHER_PRICE}, –∞ —É –≤–∞—Å {cat_coins}.")
        return

    cursor.execute("UPDATE users SET cat_coins = cat_coins - ?, has_scratcher = 1 WHERE user_id = ?", (SCRATCHER_PRICE, user_id))
    conn.commit()

    await callback.message.answer(
        f"üêæ –í—ã –∫—É–ø–∏–ª–∏ –ß–µ—Å–∞–ª–∫—É –∑–∞ {SCRATCHER_PRICE} –∫–æ—Ç–æ–∫–æ–∏–Ω–æ–≤!\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /put, —á—Ç–æ–±—ã –ø–æ–≥–ª–∞–¥–∏—Ç—å –∫–æ—Ç–∏–∫–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å 1000 –æ—á–∫–æ–≤!\n"
        f"üê± –û—Å—Ç–∞—Ç–æ–∫ –∫–æ—Ç–æ–∫–æ–∏–Ω–æ–≤: {cat_coins - SCRATCHER_PRICE}"
    )


async def buy_companion_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    cursor.execute("SELECT cat_coins FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    if not result:
        await callback.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ª—É—á–∏—Ç–µ –∫–æ—Ç–∞, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ!")
        return

    cat_coins = result[0]

    if cat_coins < COMPANION_PRICE:
        await callback.answer(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ—Ç–æ–∫–æ–∏–Ω–æ–≤. –ù—É–∂–Ω–æ {COMPANION_PRICE}, –∞ —É –≤–∞—Å {cat_coins}.")
        return

    cursor.execute("UPDATE users SET cat_coins = cat_coins - ?, has_companion = 1 WHERE user_id = ?", (COMPANION_PRICE, user_id))
    conn.commit()

    await callback.message.answer(
        f"üê± –í—ã –∫—É–ø–∏–ª–∏ –ö–æ—Ç–∞ –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞ –∑–∞ {COMPANION_PRICE} –∫–æ—Ç–æ–∫–æ–∏–Ω–æ–≤!\n"
        f"–¢–µ–ø–µ—Ä—å –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ '–∫–æ—Ç' –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç–æ—á–µ–∫!\n"
        f"üê± –û—Å—Ç–∞—Ç–æ–∫ –∫–æ—Ç–æ–∫–æ–∏–Ω–æ–≤: {cat_coins - COMPANION_PRICE}"
    )


async def buy_booster_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    cursor.execute("SELECT cat_coins, booster_end_time FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    if not result:
        await callback.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ª—É—á–∏—Ç–µ –∫–æ—Ç–∞, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ!")
        return

    cat_coins, booster_end_time = result

    if cat_coins < BOOSTER_PRICE:
        await callback.answer(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ—Ç–æ–∫–æ–∏–Ω–æ–≤. –ù—É–∂–Ω–æ {BOOSTER_PRICE}, –∞ —É –≤–∞—Å {cat_coins}.")
        return

    if booster_end_time and booster_end_time > time.time():
        await callback.answer("–£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω –ö–æ—Ç-–±—É—Å—Ç–µ—Ä!")
        return

    cursor.execute("UPDATE users SET cat_coins = cat_coins - ? WHERE user_id = ?", (BOOSTER_PRICE, user_id))
    conn.commit()

    booster_end_time = int(time.time()) + 86400
    cursor.execute("UPDATE users SET booster_end_time = ? WHERE user_id = ?", (booster_end_time, user_id))
    conn.commit()

    await callback.message.answer(
        f"üöÄ –í—ã –∫—É–ø–∏–ª–∏ –ö–æ—Ç-–±—É—Å—Ç–µ—Ä –∑–∞ {BOOSTER_PRICE} –∫–æ—Ç–æ–∫–æ–∏–Ω–æ–≤!\n"
        f"–¢–µ–ø–µ—Ä—å –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞ 50% –±–æ–ª—å—à–µ –æ—á–∫–æ–≤ –∏ –∫–æ—Ç–æ–∫–æ–∏–Ω–æ–≤ –∑–∞ –∫–∞—Ä—Ç–æ—á–∫–∏!\n"
        f"üê± –û—Å—Ç–∞—Ç–æ–∫ –∫–æ—Ç–æ–∫–æ–∏–Ω–æ–≤: {cat_coins - BOOSTER_PRICE}"
    )


async def buy_time_watch_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    cursor.execute("SELECT cat_coins, has_time_watch FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    if not result:
        await callback.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ª—É—á–∏—Ç–µ –∫–æ—Ç–∞, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ!")
        return

    cat_coins, has_time_watch = result

    if has_time_watch:
        await callback.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ß–∞—Å—ã –≤—Ä–µ–º–µ–Ω–∏!")
        return

    if cat_coins < TIME_WATCH_PRICE:
        await callback.answer(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ—Ç–æ–∫–æ–∏–Ω–æ–≤. –ù—É–∂–Ω–æ {TIME_WATCH_PRICE}, –∞ —É –≤–∞—Å {cat_coins}.")
        return

    cursor.execute("UPDATE users SET cat_coins = cat_coins - ?, has_time_watch = 1 WHERE user_id = ?", (TIME_WATCH_PRICE, user_id))
    conn.commit()

    await callback.message.answer(
        f"‚è≥ –í—ã –∫—É–ø–∏–ª–∏ –ß–∞—Å—ã –≤—Ä–µ–º–µ–Ω–∏ –∑–∞ {TIME_WATCH_PRICE} –∫–æ—Ç–æ–∫–æ–∏–Ω–æ–≤!\n"
        f"–¢–µ–ø–µ—Ä—å –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã '–∫–æ—Ç' –∫—É–ª–¥–∞—É–Ω –±—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω.\n"
        f"üê± –û—Å—Ç–∞—Ç–æ–∫ –∫–æ—Ç–æ–∫–æ–∏–Ω–æ–≤: {cat_coins - TIME_WATCH_PRICE}"
    )


async def buy_magic_medallion_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    cursor.execute("SELECT magic_coins FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    if not result:
        await callback.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ª—É—á–∏—Ç–µ –∫–æ—Ç–∞, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ!")
        return

    magic_coins = result[0]

    if magic_coins < MAGIC_MEDALLION_PRICE:
        await callback.answer(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ú–∞–≥–∏—á–µ—Å–∫–∏—Ö –∫–æ–∏–Ω–æ–≤. –ù—É–∂–Ω–æ {MAGIC_MEDALLION_PRICE}, –∞ —É –≤–∞—Å {magic_coins}.")
        return

    cursor.execute("UPDATE users SET magic_coins = magic_coins - ?, has_magic_medallion = 1 WHERE user_id = ?", (MAGIC_MEDALLION_PRICE, user_id))
    conn.commit()

    await callback.message.answer(
        f"üîÆ –í—ã –∫—É–ø–∏–ª–∏ –ú–∞–≥–∏—á–µ—Å–∫–∏–π –º–µ–¥–∞–ª—å–æ–Ω –∑–∞ {MAGIC_MEDALLION_PRICE} –ú–∞–≥–∏—á–µ—Å–∫–∏—Ö –∫–æ–∏–Ω–æ–≤!\n"
        f"–¢–µ–ø–µ—Ä—å –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞ 25% –±–æ–ª—å—à–µ –ú–∞–≥–∏—á–µ—Å–∫–∏—Ö –∫–æ–∏–Ω–æ–≤ –∑–∞ –º–∞–≥–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç—ã.\n"
        f"üîÆ –û—Å—Ç–∞—Ç–æ–∫ –ú–∞–≥–∏—á–µ—Å–∫–∏—Ö –∫–æ–∏–Ω–æ–≤: {magic_coins - MAGIC_MEDALLION_PRICE}"
    )


async def buy_magic_luck_scroll_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    cursor.execute("SELECT magic_coins FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    if not result:
        await callback.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ª—É—á–∏—Ç–µ –∫–æ—Ç–∞, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ!")
        return

    magic_coins = result[0]

    if magic_coins < MAGIC_LUCK_SCROLL_PRICE:
        await callback.answer(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ú–∞–≥–∏—á–µ—Å–∫–∏—Ö –∫–æ–∏–Ω–æ–≤. –ù—É–∂–Ω–æ {MAGIC_LUCK_SCROLL_PRICE}, –∞ —É –≤–∞—Å {magic_coins}.")
        return

    cursor.execute("UPDATE users SET magic_coins = magic_coins - ?, has_magic_luck_scroll = 1 WHERE user_id = ?", (MAGIC_LUCK_SCROLL_PRICE, user_id))
    conn.commit()

    await callback.message.answer(
        f"‚ú® –í—ã –∫—É–ø–∏–ª–∏ –ú–∞–≥–∏—á–µ—Å–∫–∏–π —Å–≤–∏—Ç–æ–∫ —É–¥–∞—á–∏ –∑–∞ {MAGIC_LUCK_SCROLL_PRICE} –ú–∞–≥–∏—á–µ—Å–∫–∏—Ö –∫–æ–∏–Ω–æ–≤!\n"
        f"–¢–µ–ø–µ—Ä—å –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ —É –≤–∞—Å —É–≤–µ–ª–∏—á–µ–Ω —à–∞–Ω—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–¥–∫–∏—Ö –∫–∞—Ä—Ç –Ω–∞ 20%.\n"
        f"üîÆ –û—Å—Ç–∞—Ç–æ–∫ –ú–∞–≥–∏—á–µ—Å–∫–∏—Ö –∫–æ–∏–Ω–æ–≤: {magic_coins - MAGIC_LUCK_SCROLL_PRICE}"
    )


async def buy_magic_scroll_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    cursor.execute("SELECT magic_coins FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    if not result:
        await callback.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ª—É—á–∏—Ç–µ –∫–æ—Ç–∞, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ!")
        return

    magic_coins = result[0]

    if magic_coins < MAGIC_SCROLL_PRICE:
        await callback.answer(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ú–∞–≥–∏—á–µ—Å–∫–∏—Ö –∫–æ–∏–Ω–æ–≤. –ù—É–∂–Ω–æ {MAGIC_SCROLL_PRICE}, –∞ —É –≤–∞—Å {magic_coins}.")
        return


    cursor.execute("UPDATE users SET magic_coins = magic_coins - ?, last_magic_time = 0 WHERE user_id = ?", (MAGIC_SCROLL_PRICE, user_id))
    conn.commit()

    await callback.message.answer(
        f"üß™ –í—ã –∫—É–ø–∏–ª–∏ –ú–∞–≥–∏—á–µ—Å–∫–∏–π —Å–≤–∏—Ç–æ–∫ –∑–∞ {MAGIC_SCROLL_PRICE} –ú–∞–≥–∏—á–µ—Å–∫–∏—Ö –∫–æ–∏–Ω–æ–≤!\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É '–º–∞–≥–∏—á–µ—Å–∫–∞—è –±–∏—Ç–≤–∞' –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è –∫—É–ª–¥–∞—É–Ω–∞.\n"
        f"üîÆ –û—Å—Ç–∞—Ç–æ–∫ –ú–∞–≥–∏—á–µ—Å–∫–∏—Ö –∫–æ–∏–Ω–æ–≤: {magic_coins - MAGIC_SCROLL_PRICE}"
    )


def register_shop_handlers(dp: Dispatcher, cooldowns: dict):
    dp.register_message_handler(shop_command, commands=["shop"])
    dp.register_callback_query_handler(buy_card_callback, lambda c: c.data == "buy_card")
    dp.register_callback_query_handler(lambda c: buy_coffee_callback(c, cooldowns), lambda c: c.data == "buy_coffee")
    dp.register_callback_query_handler(buy_scratcher_callback, lambda c: c.data == "buy_scratcher")
    dp.register_callback_query_handler(buy_companion_callback, lambda c: c.data == "buy_companion")
    dp.register_callback_query_handler(buy_booster_callback, lambda c: c.data == "buy_booster")
    dp.register_callback_query_handler(buy_time_watch_callback, lambda c: c.data == "buy_time_watch")
    dp.register_callback_query_handler(buy_magic_medallion_callback, lambda c: c.data == "buy_magic_medallion")
    dp.register_callback_query_handler(buy_magic_luck_scroll_callback, lambda c: c.data == "buy_magic_luck_scroll")
    dp.register_callback_query_handler(buy_magic_scroll_callback, lambda c: c.data == "buy_magic_scroll")